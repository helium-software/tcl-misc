Useful Programs with Tk Interface
---------------------------------
* Tk Worktime - a simple worktime logger.
    Features:
     # Outputs tab-separated text files with datasets consisting of
        date, timespan and task description
     # Supports creating multiple projects, each having its own log
     # Clock can be started and stopped several times before creating
        a log entry
     # Description and project association of a time period can be
        changed until it is finally committed to a log
     # Clock chimes after 1 hour of continuous worktime
     # "Subtract 1 minute" button for retroactive correction of
       times of distraction. Shift-click the same button for subtracting
       ten minutes.


Tcl Mechanisms:
---------------
* autoload: Automatic Command/Sub-Script Loading

    The Tcl built-in auto_load mechanism facilitates making applications
    and libraries that consist of many .tcl files. As an advantage over
    manually calling source, you (a) don't have to track and remember the
    file names where the subprocedures are defined, and (b) the subprocedures
    are loaded on demand, which speeds up the application's startup time.

    This directory provides a script that takes care of building the tclIndex
    file, in which the names and locations of auto_load-able procedures are
    stored. The script builds on the standard auto_mkindex procedure, adding a
    recursive search for .tcl files, and making it usable for execution from
    a shell.

    If you want to start a project that builds on the auto_load facility, just
    write the procedures in .tcl files where you want (no special tricks are
    required), and then execute the make-tclIndex script, similar to a compiler.
    It needs to be re-executed whenever you change the name of a procedure or
    place it in a different file. See the examples in test/ for the actions
    you need to perform (in the main program or library script) in order to let
    Tcl find your tclIndex.

* packaging-test: How to create packages for [package require]

    Packages are ideal for organizing components that are used in multiple
    projects. This directory contains some examples on how you can define
    your own packages. There is a 'classical' way of doing this, which
    requires writing/generating pkgIndex.tcl files, and a 'new' way, the
    "Tcl Modules" mechanism, where package implementations are found by their
    file names.

User Interface Demos:
---------------------
* progressbar.tcl: Progressbar that uses the second (up-down) dimension for
    more detailed progress feedback.
* menu.tcl: Pure-Ttk menu (proof of concept) designed to match closely
    the "Clam" theme's look and feel.
    Standard-Tk menus are not themeable (and there is no ttk::menu), so this
    script shows how one could work around that.

Computer Graphics:
------------------
* trigsplines.tcl: Demo on Trigonometric Interpolation for drawing splines

    Is Trigonometric Interpolation (from a Numerical Methods exercise) usable
    as an alternative method for drawing curved lines in computer graphics?

    The implemented procedure treats the points as complex numbers in the
    Gaussian plane and calculates the points that constitute the interpolation
    with one FFT and one inverse FFT. As Fast Fourier Transform always works
    on complex numbers, the interpolation is not more difficult than
    interpolating a real function f(t).

    The results are rather interesting, inherently periodic (i.e. smoothly
    closed) curves (actually the trajectory of a trigonometric polynomial
    with an order approximately equal to the number of given points).
    However, they are not useful as splines in graphical design, since
    moving any control point affects the whole curve, and the curve does
    not stay near the points (=> some sense of unstability).
    It can rather be considered as a 'toy' (like the famous spirograph);
    but the interpolation of exactly three point gives an ellipse, so
    this special case might be worthwhile for drawing programs.

* polygonal.tcl: Demo on "polygonal numbers" patterns

    The images in the German Wikipedia article about 'Centered polygonal
    numbers' (Zentrierte Polygonalzahl) inspired me to write this demo.
    I wanted to check if drawings like this result in non-periodic patterns.
    This is not the case, but the demo shows how one could do a user-friendly
    "testbed" for simple geometric drawing programs.
    

«Smart»phone App Clones
-----------------------
* reaction.tcl: Reaction testing game
